function fig_handle = plot_livewire_folder(folderPath, specificFrequency)
% plot_livewire_folder Plot all CSV files in a folder for a given measurement frequency.
%   fig_handle = plot_livewire_folder(folderPath, specificFrequency)
% 
% folderPath: path to folder containing CSV files generated by convert_lws_csv.m
% specificFrequency: string specifying the measurement frequency to plot (e.g. '48 MHz')
%
% Each measurement group (determined by first 3 characters of filename) will get its own color.

    % Input validation
    if nargin < 2
        error('Usage: plot_livewire_folder(folderPath, specificFrequency)');
    end
    if ~isfolder(folderPath)
        error('Folder not found: %s', folderPath);
    end

    % Convert frequency input to string for comparison
    specificFrequency = string(specificFrequency);

    % List CSV files
    files = dir(fullfile(folderPath, '*.csv'));
    if isempty(files)
        error('No CSV files found in folder: %s', folderPath);
    end

    % Extract group names from filenames (first 3 characters)
    groupNames = cell(1, numel(files));
    for i = 1:numel(files)
        fname = files(i).name;
        if numel(fname) >= 3
            groupNames{i} = fname(1:3);
        else
            groupNames{i} = fname;
        end
    end
    uniqueGroups = unique(groupNames, 'stable');
    numGroups = numel(uniqueGroups);

    % Assign colors to each group
    colorMap = lines(numGroups);
    groupColorMap = containers.Map(uniqueGroups, num2cell(colorMap, 2));

    % Prepare figure
    fig_handle = figure;
    hold on;
    xlabel('Distance (ft)');
    ylabel('Normalized Value');
    title(sprintf('Waveforms at %s', specificFrequency));

    METERS_TO_FEET = 3.28084;

    % Loop through files and plot data
    for i = 1:numel(files)
        fullFilePath = fullfile(folderPath, files(i).name);
        try
            opts = detectImportOptions(fullFilePath);
            % Ensure certain columns are read as strings
            forceStringCols = {'UnitsPerSample', 'ZeroIndex', 'Units', 'MeasurementFrequency', 'DataType'};
            for k = 1:numel(forceStringCols)
                col = forceStringCols{k};
                if any(strcmp(opts.VariableNames, col))
                    opts = setvartype(opts, col, 'string');
                end
            end
            tbl = readtable(fullFilePath, opts);
        catch ME
            warning('Failed to read %s: %s', fullFilePath, ME.message);
            continue;
        end

        % Filter for waveform data at the specified frequency
        isWave = strcmpi(tbl.DataType, 'Waveform');
        isFreq = tbl.MeasurementFrequency == specificFrequency;
        data = tbl(isWave & isFreq, :);
        if isempty(data)
            continue;
        end

        % Compute normalized Y values
        y_vals = data.Value;
        max_abs_y = max(abs(y_vals));
        if max_abs_y == 0
            y_norm = zeros(size(y_vals));
        else
            y_norm = y_vals / max_abs_y;
        end

        % Compute X values (distance in feet, shifted by zero index)
        idx = data.DataIndex;
        % UnitsPerSample conversion
        ups_str = data.UnitsPerSample(1);
        ups = str2double(ups_str);
        if isnan(ups) || ups <= 0
            ups = 1.0;
        end
        raw_dist = idx * ups;
        % Metric vs Standard units
        unitStr = data.Units(1);
        isMetric = strcmpi(unitStr, 'Metric');
        dist_ft = raw_dist * (isMetric * METERS_TO_FEET + ~isMetric);

        % ZeroIndex offset
        zi_str = data.ZeroIndex(1);
        zi = str2double(zi_str);
        if isnan(zi)
            zi = 0;
        end
        zero_offset = zi * ups * (isMetric * METERS_TO_FEET + ~isMetric);
        x_vals = dist_ft - zero_offset;

        % Plot with group-specific color
        grp = groupNames{i};
        clr = groupColorMap(grp);
        plot(x_vals, y_norm, 'Color', clr);
    end

    % Add legend for groups
    legend(uniqueGroups, 'Location', 'best');
    hold off;
end 