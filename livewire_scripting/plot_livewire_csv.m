% plot_livewire_csv.m
%
% Plots waveform data from a CSV file generated by convert_lws_csv.m.
% Can also save the plot to a file if an output path is provided.
%
% Author: Nathaniel Fargo
% Date: 2025-05-22 % Updated for batch processing
% Org: U of U WIRED
%
% Usage:
%   plot_livewire_csv('path/to/your_data.csv'); % Display plot
%   plot_livewire_csv('path/to/your_data.csv', {'48 MHz', '12 MHz'}); % Display specific freqs
%   plot_livewire_csv('path/to/your_data.csv', {}, 'path/to/output.png'); % Save plot with default freqs
%   plot_livewire_csv('path/to/your_data.csv', {'48 MHz'}, 'path/to/output.png'); % Save specific freq

function plot_livewire_csv(csvFilePath, specificFrequencies, outputFilePath)

    if nargin < 1
        error('Usage: plot_livewire_csv(csvFilePath, [specificFrequencies], [outputFilePath])');
    end
    
    if ~exist(csvFilePath, 'file')
        error('CSV file not found: %s', csvFilePath);
    end

    if nargin < 2
        specificFrequencies = {}; % Plot all frequencies by default
    end

    if nargin < 3
        outputFilePath = ''; % No output file path provided by default
    end
    
    % Read the CSV file
    try
        opts = detectImportOptions(csvFilePath);
        stringColumns = {'SerialNumber', 'SoftwareVersion', 'Date', 'Modulation', ...
                         'CableName', 'PreferredFrequency', 'Units', ...
                         'SelectedFrequencyAtAcquisition', 'MeasurementFrequency', 'DataType'};
        
        % Handle UnitsPerSample and ZeroIndex, which might be numeric or string
        % Also SelectedFrequencyAtAcquisition, DistanceAtAcquisition which might be strings like "None"
        semi_numeric_cols = {'UnitsPerSample', 'ZeroIndex', 'DistanceAtAcquisition'};
        for i = 1:length(semi_numeric_cols)
            col_name = semi_numeric_cols{i};
            if any(strcmp(opts.VariableNames, col_name))
                % Read as string first for robust conversion or handling non-numeric like "None"
                opts = setvartype(opts, col_name, 'string'); 
            end
        end

        % VOP might still be in older CSVs, ensure it's handled during import if present, though not used for plotting
        if any(strcmp(opts.VariableNames, 'VOP')) 
            if ~strcmp(opts.VariableTypes{strcmp(opts.VariableNames, 'VOP')}, 'double')
                opts = setvartype(opts, 'VOP', 'string'); 
            end
        end

        for k = 1:length(stringColumns)
            if any(strcmp(opts.VariableNames, stringColumns{k}))
                 % Ensure specified string columns are read as strings
                opts = setvartype(opts, stringColumns{k}, 'string');
            end
        end
        data = readtable(csvFilePath, opts);
    catch ME
        error('Failed to read CSV file: %s\n%s', csvFilePath, ME.message);
    end

    % Check for required columns (VOP no longer required for plotting)
    requiredCols = {'MeasurementFrequency', 'DataType', 'DataIndex', 'Value', 'SerialNumber', 'CableName', ...
                    'UnitsPerSample', 'Units', 'ZeroIndex', ...
                    'SelectedFrequencyAtAcquisition', 'DistanceAtAcquisition'}; % Added acq. cols
    if ~all(ismember(requiredCols, data.Properties.VariableNames))
        missing = setdiff(requiredCols, data.Properties.VariableNames);
        error('CSV file is missing required columns: %s', strjoin(missing, ', '));
    end

    % Filter for Waveform data only
    waveformRows = strcmpi(data.DataType, "Waveform");
    waveformData = data(waveformRows, :);

    if isempty(waveformData)
        disp('No waveform data found in the CSV file.');
        return;
    end

    % --- Get Global File Headers from the *original* data table or initial waveformData ---
    % These should be consistent across the file.
    
    % Use the overall 'data' table for SerialNumber and CableName to avoid issues if waveformData is empty initially.
    firstDataRow = data(1,:); % Use the very first row of the CSV for truly global headers

    serialNumStr = 'Unknown Serial'; 
    if any(strcmp(firstDataRow.Properties.VariableNames, 'SerialNumber'))
        tempSerial = firstDataRow.SerialNumber;
        if ~(ismissing(tempSerial) || (isstring(tempSerial) && strlength(tempSerial)==0) || (ischar(tempSerial) && isempty(tempSerial)))
            serialNumStr = char(tempSerial);
        end
    end
    
    cableNameStr = 'Unknown Cable'; 
    if any(strcmp(firstDataRow.Properties.VariableNames, 'CableName'))
        tempCable = firstDataRow.CableName;
        if ~(ismissing(tempCable) || (isstring(tempCable) && strlength(tempCable)==0) || (ischar(tempCable) && isempty(tempCable)))
            cableNameStr = char(tempCable);
        end
    end

    acqFreqForPlotting = 'N/A'; 
    if any(strcmp(firstDataRow.Properties.VariableNames, 'SelectedFrequencyAtAcquisition'))
        tempAcqFreq = firstDataRow.SelectedFrequencyAtAcquisition;
        if ~(ismissing(tempAcqFreq) || (isstring(tempAcqFreq) && (tempAcqFreq == "" || strcmpi(tempAcqFreq, "None"))) || (ischar(tempAcqFreq) && (isempty(tempAcqFreq) || strcmpi(tempAcqFreq, 'None'))))
            acqFreqForPlotting = char(tempAcqFreq);
        end
    end

    numericAcqDistFeet = NaN; 
    if any(strcmp(firstDataRow.Properties.VariableNames, 'DistanceAtAcquisition'))
        tempAcqDistStr = firstDataRow.DistanceAtAcquisition; 
        
        overallUnitsStr = 'Standard'; 
        if any(strcmp(firstDataRow.Properties.VariableNames, 'Units'))
             tempOverallUnits = firstDataRow.Units;
             if ~(ismissing(tempOverallUnits) || (isstring(tempOverallUnits) && strlength(tempOverallUnits)==0) || (ischar(tempOverallUnits) && isempty(tempOverallUnits)))
                overallUnitsStr = char(tempOverallUnits);
             else
                warning('Overall units for DistanceAtAcquisition context is missing/empty. Assuming Standard (feet).');
             end
        else
            warning('Units column for DistanceAtAcquisition context not found. Assuming Standard (feet).');
        end
        isOverallMetric = strcmpi(overallUnitsStr, "Metric");

        if ~(ismissing(tempAcqDistStr) || (isstring(tempAcqDistStr) && (tempAcqDistStr == "" || strcmpi(tempAcqDistStr, "None"))) || (ischar(tempAcqDistStr) && (isempty(tempAcqDistStr) || strcmpi(tempAcqDistStr, 'None'))))
            tempNumericAcqDist = str2double(char(tempAcqDistStr));
            if ~isnan(tempNumericAcqDist)
                if isOverallMetric
                    numericAcqDistFeet = tempNumericAcqDist * METERS_TO_FEET;
                else
                    numericAcqDistFeet = tempNumericAcqDist; 
                end
            else
                 warning('DistanceAtAcquisition \'\'%s\'\' from file header is not a valid number.', char(tempAcqDistStr));
            end
        end
    end

    % Determine frequencies to plot
    originalWaveformData = waveformData; % Keep a copy of the full waveform data before filtering

    if isempty(specificFrequencies)
        disp('No specific frequencies provided by user.');
        if ~strcmpi(acqFreqForPlotting, 'N/A')
            disp(['Attempting to plot SelectedFrequencyAtAcquisition: ' acqFreqForPlotting]);
            % Check if this frequency exists and has data in the original waveform data
            freqExistsMask = strcmp(originalWaveformData.MeasurementFrequency, acqFreqForPlotting);
            if any(freqExistsMask)
                waveformData = originalWaveformData(freqExistsMask, :); % Use only data for this frequency
                frequenciesToPlot = {acqFreqForPlotting};
                disp(['Successfully selected data for: ' acqFreqForPlotting]);
            else
                disp(['Warning: SelectedFrequencyAtAcquisition (' acqFreqForPlotting ') not found or has no waveform data. Plotting all available frequencies instead.']);
                waveformData = originalWaveformData; % Use all original waveform data
                frequenciesToPlot = unique(waveformData.MeasurementFrequency, 'stable');
            end
        else
            disp('SelectedFrequencyAtAcquisition not available/invalid. Plotting all available waveform frequencies.');
            waveformData = originalWaveformData; % Use all original waveform data
            frequenciesToPlot = unique(waveformData.MeasurementFrequency, 'stable');
        end
    else % User provided specific frequencies
        userSpecifiedFreqs = string(specificFrequencies(:)'); % Ensure it's a string array
        validFreqMask = ismember(originalWaveformData.MeasurementFrequency, userSpecifiedFreqs);
        waveformData = originalWaveformData(validFreqMask, :);
        
        if isempty(waveformData)
            disp('None of the user-specified frequencies were found or have waveform data.');
            frequenciesToPlot = {}; % Set to empty to gracefully exit or be caught later
        else
            frequenciesToPlot = unique(waveformData.MeasurementFrequency, 'stable');
        end
        
        % Check and report if any user-specified frequencies were not found (even if some were)
        foundInPlotData = unique(waveformData.MeasurementFrequency); % Freqs that will actually be plotted
        notFoundFreqs = setdiff(userSpecifiedFreqs, foundInPlotData);
        if ~isempty(notFoundFreqs)
            disp('Warning: The following user-specified frequencies were not found or had no waveform data after filtering:');
            disp(strjoin(notFoundFreqs, ', '));
        end
    end

    if isempty(frequenciesToPlot)
        disp('No frequencies to plot after filtering.');
        return;
    end

    numPlots = length(frequenciesToPlot);
    
    % Constants
    METERS_TO_FEET = 3.28084;

    % Create a new figure
    fig = figure;
    try % Use try-catch for sgtitle in older MATLAB versions
        titleStr = sprintf('Waveforms for Serial: %s, Cable: %s', serialNumStr, cableNameStr);
        sgtitle(titleStr);
    catch
        % For older MATLAB versions that don't have sgtitle, use a workaround
        warning('sgtitle not available. Setting figure Name. May overlap.');
        set(gcf, 'Name', sprintf('S: %s, C: %s', serialNumStr, cableNameStr));
    end
    
    % Use tiled layout
    tlo = tiledlayout('flow', 'TileSpacing', 'compact', 'Padding', 'compact');

    for i = 1:numPlots
        currentFreq = frequenciesToPlot(i);
        freqDataRows = waveformData.MeasurementFrequency == currentFreq;
        freqData = waveformData(freqDataRows, :);
        
        if isempty(freqData)
            disp(['Skipping frequency ' char(currentFreq) ' as no data remains after filtering.']);
            nexttile(tlo);
            
            acqDistStrPartForFiltered = 'Acq. Dist: N/A';
            if ~isnan(numericAcqDistFeet)
                feet = floor(numericAcqDistFeet);
                inches = round((numericAcqDistFeet - feet) * 12);
                if inches == 12
                    feet = feet + 1;
                    inches = 0;
                end
                acqDistStrPartForFiltered = sprintf('Acq. Dist: %d ft %d in', feet, inches);
            end
            titleStr = sprintf('%s (No Data - Filtered Out, %s)', char(currentFreq), acqDistStrPartForFiltered);
            title(titleStr);
            xlabel('Distance (ft)');
            ylabel('Normalized Value');
            text(0.5, 0.5, 'No Data', 'HorizontalAlignment', 'center', 'Units', 'normalized');
            xlim([0 10]);
            ylim([-1.1, 1.1]); 
            grid on;
            continue;
        end

        % --- Y-axis Normalization (Scale by max absolute value) ---
        y_values = freqData.Value;
        max_abs_y = max(abs(y_values));

        if max_abs_y == 0
            normalized_y_original = zeros(size(y_values));
        else
            normalized_y_original = y_values / max_abs_y;
        end

        % --- X-axis Distance in Feet ---
        dataIndex = freqData.DataIndex;
        
        currentUnitsPerSampleStr = freqData.UnitsPerSample(1);
        if isstring(currentUnitsPerSampleStr) || ischar(currentUnitsPerSampleStr)
            currentUnitsPerSample = str2double(currentUnitsPerSampleStr);
        else
            currentUnitsPerSample = currentUnitsPerSampleStr; 
        end
        if isnan(currentUnitsPerSample) || isempty(currentUnitsPerSample) || currentUnitsPerSample <= 0
            warning('Invalid or missing UnitsPerSample for frequency %s. Using 1.0.', char(currentFreq));
            currentUnitsPerSample = 1.0;
        end
        distance_original_units = dataIndex .* currentUnitsPerSample;

        unitsStr = freqData.Units(1);
        if ismissing(unitsStr) || unitsStr == ""
            warning('Units (Standard/Metric) not found for frequency %s. Assuming Standard (feet).', char(currentFreq));
            unitsStr = "Standard";
        end
        isMetric = strcmpi(unitsStr, "Metric");
        
        distance_feet_original = distance_original_units;
        if isMetric 
            distance_feet_original = distance_original_units .* METERS_TO_FEET;
        end

        % --- Apply ZeroIndex Offset ---
        currentZeroIndexStr = freqData.ZeroIndex(1);
        if isstring(currentZeroIndexStr) || ischar(currentZeroIndexStr)
            currentZeroIndex = str2double(currentZeroIndexStr);
        else
            currentZeroIndex = currentZeroIndexStr; % Assume already numeric
        end
        if isnan(currentZeroIndex) || isempty(currentZeroIndex)
            warning('Invalid or missing ZeroIndex for frequency %s. Using 0.0.', char(currentFreq));
            currentZeroIndex = 0.0;
        end

        zero_offset_original_units = currentZeroIndex * currentUnitsPerSample;
        zero_offset_feet = zero_offset_original_units;
        if isMetric
            zero_offset_feet = zero_offset_original_units * METERS_TO_FEET;
        end
        
        distance_feet_shifted = distance_feet_original - zero_offset_feet;
        
        x_data_to_plot = distance_feet_shifted;
        y_data_to_plot = normalized_y_original;

        nexttile(tlo);
        
        baseTitlePart = char(currentFreq);
        acqDistStrPart = 'Acq. Dist: N/A';
        if ~isnan(numericAcqDistFeet)
            feet = floor(numericAcqDistFeet);
            inches = round((numericAcqDistFeet - feet) * 12);
            if inches == 12
                feet = feet + 1;
                inches = 0;
            end
            acqDistStrPart = sprintf('Acq. Dist: %d ft %d in', feet, inches);
        end

        dataPlotted = false;

        if ~isempty(x_data_to_plot) && ~isempty(y_data_to_plot) && numel(x_data_to_plot) > 0
            plot(x_data_to_plot, y_data_to_plot);
            dataPlotted = true;
            hold on;
            current_xlim = xlim; 
            if 0 >= current_xlim(1) && 0 <= current_xlim(2)
                line([0 0], [-1.1, 1.1], 'Color', 'b', 'LineStyle', ':', 'LineWidth', 1, 'DisplayName', 'Zero Index');
            end
            if ~isnan(numericAcqDistFeet)
                acqDistLinePositionOnPlot = numericAcqDistFeet;
                if acqDistLinePositionOnPlot >= current_xlim(1) && acqDistLinePositionOnPlot <= current_xlim(2)
                    line([acqDistLinePositionOnPlot acqDistLinePositionOnPlot], [-1.1, 1.1], 'Color', 'b', 'LineStyle', ':', 'LineWidth', 1, 'DisplayName', 'Acq. Distance');
                end
            end
            hold off;

            plotTitleStr = sprintf('%s (%s)', baseTitlePart, acqDistStrPart);
            axis tight; 

        else % No data or insufficient data to plot for this frequency
            disp(['Data for frequency ' char(currentFreq) ' is empty or invalid for plotting after processing.']);
            plotTitleStr = sprintf('%s (No Data, %s)', baseTitlePart, acqDistStrPart);
            plot(NaN, NaN); % Create axes for text and lines
            text(0.5, 0.5, 'No Data', 'HorizontalAlignment', 'center', 'Units', 'normalized');
            xlim([0 10]); % Default x-axis for "No Data" plots
            
            % Attempt to draw lines on this default axis
            current_xlim_no_data = xlim;
            if 0 >= current_xlim_no_data(1) && 0 <= current_xlim_no_data(2)
                line([0 0], [-1.1, 1.1], 'Color', 'b', 'LineStyle', ':', 'LineWidth', 1);
            end
            if ~isnan(numericAcqDistFeet) && numericAcqDistFeet >= current_xlim_no_data(1) && numericAcqDistFeet <= current_xlim_no_data(2)
                line([numericAcqDistFeet numericAcqDistFeet], [-1.1, 1.1], 'Color', 'b', 'LineStyle', ':', 'LineWidth', 1);
            end
        end
        
        title(plotTitleStr);
        xlabel('Distance (ft)');
        ylabel('Normalized Value');
        ylim([-1.1, 1.1]); 
        grid on;
        % axis tight is applied selectively above if dataPlotted
        % ylim is re-applied here to ensure it is [-1.1, 1.1] regardless of axis tight or No Data case

    end

    if numPlots == 0 && ~isempty(specificFrequencies)
        disp('No data plotted. Ensure specified frequencies exist and have waveform data.')
    elseif numPlots == 0
        disp('No waveform data found to plot.')
    end

    % Save to file if outputFilePath is provided
    if ~isempty(outputFilePath)
        try
            % Ensure the figure is sized appropriately before saving for consistent output
            % For example, set to a common size or use PaperPositionMode auto
            set(fig, 'PaperPositionMode', 'auto'); 
            % Or explicitly set a size:
            % set(fig, 'Position', [100, 100, 1024, 768]); % Example: X, Y, Width, Height
            
            saveas(fig, outputFilePath);
            fprintf('Plot saved to %s\\n', outputFilePath);
            close(fig); % Close the figure after saving to prevent display
        catch ME_save
            warning('Failed to save plot to %s: %s', outputFilePath, ME_save.message);
            if ishandle(fig)
                close(fig); % Still close if saving failed but figure exists
            end
        end
    else
        % If not saving to file, ensure figure is visible if it was created.
        % (This is default behavior unless figure visibility was turned off earlier)
        % For clarity, one might set set(fig, 'Visible', 'on'); if it might have been off.
    end

end
